// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/customer.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcGreeter {
  public static partial class Customer
  {
    static readonly string __ServiceName = "customer.Customer";

    static readonly grpc::Marshaller<global::GrpcGreeter.CustomerRequest> __Marshaller_customer_CustomerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcGreeter.CustomerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcGreeter.CustomerModel> __Marshaller_customer_CustomerModel = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcGreeter.CustomerModel.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcGreeter.CustomerAddedResult> __Marshaller_customer_CustomerAddedResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcGreeter.CustomerAddedResult.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel> __Method_GetCustomer = new grpc::Method<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCustomer",
        __Marshaller_customer_CustomerRequest,
        __Marshaller_customer_CustomerModel);

    static readonly grpc::Method<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel> __Method_GetAllCustomers = new grpc::Method<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAllCustomers",
        __Marshaller_customer_CustomerRequest,
        __Marshaller_customer_CustomerModel);

    static readonly grpc::Method<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult> __Method_AddCustomer = new grpc::Method<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCustomer",
        __Marshaller_customer_CustomerModel,
        __Marshaller_customer_CustomerAddedResult);

    static readonly grpc::Method<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult> __Method_AddCustomers = new grpc::Method<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddCustomers",
        __Marshaller_customer_CustomerModel,
        __Marshaller_customer_CustomerAddedResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcGreeter.CustomerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Customer</summary>
    [grpc::BindServiceMethod(typeof(Customer), "BindService")]
    public abstract partial class CustomerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcGreeter.CustomerModel> GetCustomer(global::GrpcGreeter.CustomerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetAllCustomers(global::GrpcGreeter.CustomerRequest request, grpc::IServerStreamWriter<global::GrpcGreeter.CustomerModel> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcGreeter.CustomerAddedResult> AddCustomer(global::GrpcGreeter.CustomerModel request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Unary
      ///   rpc UnaryCall (ExampleRequest) returns (ExampleResponse);
      /// Server streaming
      ///   rpc StreamingFromServer (ExampleRequest) returns (stream ExampleResponse);
      /// Client streaming
      ///   rpc StreamingFromClient (stream ExampleRequest) returns (ExampleResponse);
      /// Bi-directional streaming
      ///   rpc StreamingBothWays (stream ExampleRequest) returns (stream ExampleResponse);
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::GrpcGreeter.CustomerAddedResult> AddCustomers(grpc::IAsyncStreamReader<global::GrpcGreeter.CustomerModel> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CustomerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetCustomer, serviceImpl.GetCustomer)
          .AddMethod(__Method_GetAllCustomers, serviceImpl.GetAllCustomers)
          .AddMethod(__Method_AddCustomer, serviceImpl.AddCustomer)
          .AddMethod(__Method_AddCustomers, serviceImpl.AddCustomers).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CustomerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel>(serviceImpl.GetCustomer));
      serviceBinder.AddMethod(__Method_GetAllCustomers, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::GrpcGreeter.CustomerRequest, global::GrpcGreeter.CustomerModel>(serviceImpl.GetAllCustomers));
      serviceBinder.AddMethod(__Method_AddCustomer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult>(serviceImpl.AddCustomer));
      serviceBinder.AddMethod(__Method_AddCustomers, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GrpcGreeter.CustomerModel, global::GrpcGreeter.CustomerAddedResult>(serviceImpl.AddCustomers));
    }

  }
}
#endregion
